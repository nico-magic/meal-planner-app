{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"navigation\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport DrawerStatusContext from \"../utils/DrawerStatusContext\";\nimport getDrawerStatusFromState from \"../utils/getDrawerStatusFromState\";\nimport DrawerContent from \"./DrawerContent\";\nimport DrawerToggleButton from \"./DrawerToggleButton\";\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport { MaybeScreen, MaybeScreenContainer } from \"./ScreenFallback\";\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    defaultStatus = _ref2.defaultStatus,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(DrawerContent, props);\n    } : _ref2$drawerContent,\n    _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n    detachInactiveScreens = _ref2$detachInactiveS === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _ref2$detachInactiveS,\n    _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n    useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)) : _ref2$useLegacyImplem;\n  var legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n  var Drawer = useLegacyImplementation ? require(\"./legacy/Drawer\").default : require(\"./modern/Drawer\").default;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n    _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n    drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,\n    _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,\n    drawerPosition = _descriptors$focusedR3 === void 0 ? I18nManager.getConstants().isRTL ? 'right' : 'left' : _descriptors$focusedR3,\n    _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,\n    drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,\n    drawerStyle = _descriptors$focusedR.drawerStyle,\n    _descriptors$focusedR5 = _descriptors$focusedR.drawerType,\n    drawerType = _descriptors$focusedR5 === void 0 ? Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }) : _descriptors$focusedR5,\n    gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n    _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,\n    keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,\n    _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,\n    overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,\n    _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,\n    swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,\n    _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,\n    swipeEnabled = _descriptors$focusedR9 === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _descriptors$focusedR9,\n    _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,\n    swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10;\n  var _React$useState = React.useState([focusedRouteKey]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n  var dimensions = useSafeAreaFrame();\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var drawerStatus = getDrawerStatusFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n      return true;\n    };\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n    var subscription = BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n    return function () {\n      subscription.remove();\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n        _descriptor$options$l = _descriptor$options.lazy,\n        lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n        unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      var _descriptor$options2 = descriptor.options,\n        _descriptor$options2$ = _descriptor$options2.header,\n        header = _descriptor$options2$ === void 0 ? function (_ref3) {\n          var _options$headerLeft;\n          var layout = _ref3.layout,\n            options = _ref3.options;\n          return React.createElement(Header, _extends({}, options, {\n            layout: layout,\n            title: getHeaderTitle(options, route.name),\n            headerLeft: (_options$headerLeft = options.headerLeft) !== null && _options$headerLeft !== void 0 ? _options$headerLeft : function (props) {\n              return React.createElement(DrawerToggleButton, props);\n            }\n          }));\n        } : _descriptor$options2$,\n        sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens\n      }, React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: descriptor.options.headerShown,\n        headerTransparent: descriptor.options.headerTransparent,\n        headerStatusBarHeight: descriptor.options.headerStatusBarHeight,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n  return React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\nexport default function DrawerView(_ref4) {\n  var navigation = _ref4.navigation,\n    rest = _objectWithoutProperties(_ref4, _excluded);\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","BackHandler","I18nManager","Platform","StyleSheet","View","Reanimated","useSafeAreaFrame","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","_ref","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","GestureHandlerWrapper","DrawerViewBase","_ref2","_Reanimated$isConfigu","state","navigation","descriptors","defaultStatus","_ref2$drawerContent","drawerContent","props","createElement","_ref2$detachInactiveS","detachInactiveScreens","_ref2$useLegacyImplem","useLegacyImplementation","isConfigured","call","legacyImplemenationNotAvailable","require","abs","undefined","Error","Drawer","default","focusedRouteKey","routes","index","key","_descriptors$focusedR","options","_descriptors$focusedR2","drawerHideStatusBarOnOpen","_descriptors$focusedR3","drawerPosition","getConstants","isRTL","_descriptors$focusedR4","drawerStatusBarAnimation","drawerStyle","_descriptors$focusedR5","drawerType","select","ios","gestureHandlerProps","_descriptors$focusedR6","keyboardDismissMode","_descriptors$focusedR7","overlayColor","_descriptors$focusedR8","swipeEdgeWidth","_descriptors$focusedR9","swipeEnabled","_descriptors$focusedR10","swipeMinDistance","_React$useState","useState","_React$useState2","_slicedToArray","loaded","setLoaded","includes","concat","_toConsumableArray","dimensions","_useTheme","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","_objectSpread","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","addEventListener","_document","_document$body","_document$body$addEve","document","body","remove","_document2","_document2$body","_document2$body$remov","removeEventListener","renderDrawerContent","Provider","value","renderSceneContent","enabled","hasTwoStates","style","styles","content","map","route","descriptor","_descriptor$options","_descriptor$options$l","lazy","unmountOnBlur","_descriptor$options2","_descriptor$options2$","header","_ref3","_options$headerLeft","layout","_extends","title","name","headerLeft","sceneContainerStyle","absoluteFill","zIndex","visible","focused","headerShown","headerTransparent","headerStatusBarHeight","render","open","onOpen","onClose","swipeVelocityThreshold","swipeDistanceThreshold","hideStatusBarOnOpen","statusBarAnimation","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","DrawerView","_ref4","rest","_objectWithoutProperties","_excluded","create","flex"],"sources":["G:\\DOWNLOADS\\meal-app-main\\node_modules\\@react-navigation\\drawer\\lib\\module\\views\\DrawerView.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  DrawerStatus,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Reanimated 2 is not configured\n  // @ts-expect-error: the type definitions are incomplete\n  useLegacyImplementation = !Reanimated.isConfigured?.(),\n}: Props) {\n  // Reanimated v3 dropped legacy v1 syntax\n  const legacyImplemenationNotAvailable =\n    require('react-native-reanimated').abs === undefined;\n\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error(\n      'The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.'\n    );\n  }\n\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleHardwareBack\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={descriptor.options.headerShown}\n                headerTransparent={descriptor.options.headerTransparent}\n                headerStatusBarHeight={descriptor.options.headerStatusBarHeight}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,cADF,EAEEC,MAFF,EAGEC,sBAHF,EAIEC,MAJF,QAKO,4BALP;AAMA,SACEC,aADF,EAKEC,QALF,QAMO,0BANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAAA,OAAAC,WAAA;AAAA,OAAAC,WAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAQA,OAAO,KAAKC,UAAZ,MAA4B,yBAA5B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAWA,OAAOC,qBAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,wBAAP;AACA,OAAOC,aAAP;AACA,OAAOC,kBAAP;AACA,SAASC,sBAAT;AACA,SAASC,WAAT,EAAsBC,oBAAtB;AASA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAGC,IAAA,EAMxB;EAAA,IALJC,MAD6B,GAMzBD,IAAA,CALJC,MAD6B;IAE7BC,KAAA,GAIIF,IAAA,CAJJE,KAAA;EAUA,IAAMC,eAAe,GAAGC,IAAI,CAACC,GAAL,CAASJ,MAAT,EAAiBC,KAAjB,CAAxB;EACA,IAAMI,WAAW,GAAGJ,KAAK,GAAGD,MAA5B;EACA,IAAMM,QAAQ,GAAGJ,eAAe,IAAI,GAApC;EACA,IAAMK,YAAY,GAAGtB,QAAQ,CAACuB,EAAT,KAAgB,KAAhB,GAAyBH,WAAW,GAAG,EAAH,GAAQ,EAA5C,GAAkD,EAAvE;EACA,IAAMI,QAAQ,GAAGH,QAAQ,GAAG,GAAH,GAAS,GAAlC;EAEA,OAAOH,IAAI,CAACC,GAAL,CAASF,eAAe,GAAGK,YAA3B,EAAyCE,QAAzC,CAAP;AACD,CAnBD;AAqBA,IAAMC,qBAAqB,GAAGf,sBAAH,aAAGA,sBAAH,cAAGA,sBAAH,GAA6BR,IAAxD;AAEA,SAASwB,cAATA,CAAAC,KAAA,EAcU;EAAA,IAAAC,qBAAA;EAAA,IAbRC,KADsB,GAcdF,KAAA,CAbRE,KADsB;IAEtBC,UAFsB,GAcdH,KAAA,CAZRG,UAFsB;IAGtBC,WAHsB,GAcdJ,KAAA,CAXRI,WAHsB;IAItBC,aAJsB,GAcdL,KAAA,CAVRK,aAJsB;IAAAC,mBAAA,GAcdN,KAAA,CATRO,aAAa;IAAbA,aAAa,GAAAD,mBAAA,cAAI,UAAAE,KAAD;MAAA,OACdtC,KAAA,CAAAuC,aAAA,CAAC5B,aAAD,EAAmB2B,KAAnB,CANoB;IAAA,IAAAF,mBAAA;IAAAI,qBAAA,GAcdV,KAAA,CANRW,qBAAqB;IAArBA,qBAAqB,GAAAD,qBAAA,cAAGrC,QAAQ,CAACuB,EAAT,KAAgB,KAAhB,IACtBvB,QAAQ,CAACuB,EAAT,KAAgB,SADM,IAEtBvB,QAAQ,CAACuB,EAAT,KAAgB,KAVI,GAAAc,qBAAA;IAAAE,qBAAA,GAcdZ,KAAA,CADRa,uBAAuB;IAAvBA,uBAAuB,GAAAD,qBAAA,cAAG,GAAAX,qBAAA,GAACzB,UAAU,CAACsC,YAAZ,cAAAb,qBAAA,eAACA,qBAAA,CAAAc,IAAA,CAAAvC,UAAU,CAAX,IAAAoC,qBAAA;EAG1B,IAAMI,+BAA+B,GACnCC,OAAO,CAAC,yBAAD,CAAP,CAAmCC,GAAnC,KAA2CC,SAD7C;EAGA,IAAIN,uBAAuB,IAAIG,+BAA/B,EAAgE;IAC9D,MAAM,IAAII,KAAJ,CACJ,6NADI,CAAN;EAGD;EAED,IAAMC,MAAwC,GAAGR,uBAAuB,GACpEI,OAAO,mBAAP,CAA2BK,OADyC,GAEpEL,OAAO,mBAAP,CAA2BK,OAF/B;EAIA,IAAMC,eAAe,GAAGrB,KAAK,CAACsB,MAAN,CAAatB,KAAK,CAACuB,KAAnB,EAA0BC,GAAlD;EACA,IAAAC,qBAAA,GAcIvB,WAAW,CAACmB,eAAD,CAAX,CAA6BK,OAdjC;IAAAC,sBAAA,GAAAF,qBAAA,CACEG,yBAAyB;IAAzBA,yBAAyB,GAAAD,sBAAA,cAAG,KADxB,GAAAA,sBAAA;IAAAE,sBAAA,GAAAJ,qBAAA,CAEJK,cAAc;IAAdA,cAAc,GAAAD,sBAAA,cAAG3D,WAAW,CAAC6D,YAAZ,GAA2BC,KAA3B,GAAmC,OAAnC,GAA6C,MAF1D,GAAAH,sBAAA;IAAAI,sBAAA,GAAAR,qBAAA,CAGJS,wBAAwB;IAAxBA,wBAAwB,GAAAD,sBAAA,cAAG,OAHvB,GAAAA,sBAAA;IAIJE,WAJI,GAAAV,qBAAA,CAIJU,WAJI;IAAAC,sBAAA,GAAAX,qBAAA,CAKJY,UAAU;IAAVA,UAAU,GAAAD,sBAAA,cAAGjE,QAAQ,CAACmE,MAAT,CAAgB;MAAEC,GAAG,EAAE,OAAP;MAAgBnB,OAAO,EAAE;IAAzB,CAAhB,CALT,GAAAgB,sBAAA;IAMJI,mBANI,GAAAf,qBAAA,CAMJe,mBANI;IAAAC,sBAAA,GAAAhB,qBAAA,CAOJiB,mBAAmB;IAAnBA,mBAAmB,GAAAD,sBAAA,cAAG,SAPlB,GAAAA,sBAAA;IAAAE,sBAAA,GAAAlB,qBAAA,CAQJmB,YAAY;IAAZA,YAAY,GAAAD,sBAAA,cAAG,oBARX,GAAAA,sBAAA;IAAAE,sBAAA,GAAApB,qBAAA,CASJqB,cAAc;IAAdA,cAAc,GAAAD,sBAAA,cAAG,EATb,GAAAA,sBAAA;IAAAE,sBAAA,GAAAtB,qBAAA,CAUJuB,YAAY;IAAZA,YAAY,GAAAD,sBAAA,cAAG5E,QAAQ,CAACuB,EAAT,KAAgB,KAAhB,IACbvB,QAAQ,CAACuB,EAAT,KAAgB,SADH,IAEbvB,QAAQ,CAACuB,EAAT,KAAgB,OAZd,GAAAqD,sBAAA;IAAAE,uBAAA,GAAAxB,qBAAA,CAaJyB,gBAAgB;IAAhBA,gBAAgB,GAAAD,uBAAA,cAAG,KAAAA,uBAAA;EAGrB,IAAAE,eAAA,GAA4BnF,KAAK,CAACoF,QAAN,CAAe,CAAC/B,eAAD,CAAf,CAA5B;IAAAgC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAAOI,MAAD,GAAAF,gBAAA;IAASG,SAAT,GAAAH,gBAAA;EAEN,IAAI,CAACE,MAAM,CAACE,QAAP,CAAgBpC,eAAhB,CAAL,EAAuC;IACrCmC,SAAS,IAAAE,MAAA,CAAAC,kBAAA,CAAKJ,MAAJ,IAAYlC,eAAZ,EAAD,CAAT;EACD;EAED,IAAMuC,UAAU,GAAGrF,gBAAgB,EAAnC;EAEA,IAAAsF,SAAA,GAAmB9F,QAAQ,EAA3B;IAAQ+F,MAAA,GAAAD,SAAA,CAAAC,MAAA;EAER,IAAMC,YAAY,GAAGrF,wBAAwB,CAACsB,KAAD,CAA7C;EAEA,IAAMgE,gBAAgB,GAAGhG,KAAK,CAACiG,WAAN,CAAkB,YAAM;IAC/ChE,UAAU,CAACiE,QAAX,CAAAC,aAAA,CAAAA,aAAA,KACKrG,aAAa,CAACsG,UAAd,EADe;MAElBC,MAAM,EAAErE,KAAK,CAACwB;IAAA,EAFhB;EAID,CALwB,EAKtB,CAACvB,UAAD,EAAaD,KAAK,CAACwB,GAAnB,CALsB,CAAzB;EAOA,IAAM8C,iBAAiB,GAAGtG,KAAK,CAACiG,WAAN,CAAkB,YAAM;IAChDhE,UAAU,CAACiE,QAAX,CAAAC,aAAA,CAAAA,aAAA,KACKrG,aAAa,CAACyG,WAAd,EADe;MAElBF,MAAM,EAAErE,KAAK,CAACwB;IAAA,EAFhB;EAID,CALyB,EAKvB,CAACvB,UAAD,EAAaD,KAAK,CAACwB,GAAnB,CALuB,CAA1B;EAOAxD,KAAK,CAACwG,SAAN,CAAgB,YAAM;IACpB,IAAIT,YAAY,KAAK5D,aAAjB,IAAkCkC,UAAU,KAAK,WAArD,EAAkE;MAChE;IACD;IAED,IAAMoC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;MAG/B,IAAI,CAACxE,UAAU,CAACyE,SAAX,EAAL,EAA6B;QAC3B,OAAO,KAAP;MACD;MAED,IAAIvE,aAAa,KAAK,MAAtB,EAA8B;QAC5B6D,gBAAgB;MACjB,CAFD,MAEO;QACLM,iBAAiB;MAClB;MAED,OAAO,IAAP;IACD,CAdD;IAgBA,IAAMK,YAAY,GAAI,SAAhBA,YAAYA,CAAIC,CAAD,EAAsB;MACzC,IAAIA,CAAC,CAACpD,GAAF,KAAU,QAAd,EAAwB;QACtBiD,kBAAkB;MACnB;IACF,CAJD;IASA,IAAMI,YAAY,GAAG5G,WAAW,CAAC6G,gBAAZ,CACnB,mBADmB,EAEnBL,kBAFmB,CAArB;IAKA,IAAItG,QAAQ,CAACuB,EAAT,KAAgB,KAApB,EAA2B;MAAA,IAAAqF,SAAA,EAAAC,cAAA,EAAAC,qBAAA;MACzB,CAAAF,SAAA,GAAAG,QAAQ,UAAR,IAAAH,SAAA,wBAAAC,cAAA,GAAAD,SAAA,CAAUI,IAAV,cAAAH,cAAA,wBAAAC,qBAAA,GAAAD,cAAA,CAAgBF,gBAAhB,cAAAG,qBAAA,uBAAAA,qBAAA,CAAApE,IAAA,CAAAmE,cAAA,EAAmC,OAAnC,EAA4CL,YAA5C;IACD;IAED,OAAO,YAAM;MACXE,YAAY,CAACO,MAAb;MAEA,IAAIjH,QAAQ,CAACuB,EAAT,KAAgB,KAApB,EAA2B;QAAA,IAAA2F,UAAA,EAAAC,eAAA,EAAAC,qBAAA;QACzB,CAAAF,UAAA,GAAAH,QAAQ,UAAR,IAAAG,UAAA,wBAAAC,eAAA,GAAAD,UAAA,CAAUF,IAAV,cAAAG,eAAA,wBAAAC,qBAAA,GAAAD,eAAA,CAAgBE,mBAAhB,cAAAD,qBAAA,uBAAAA,qBAAA,CAAA1E,IAAA,CAAAyE,eAAA,EAAsC,OAAtC,EAA+CX,YAA/C;MACD;IACF,CAND;EAOD,CA9CD,EA8CG,CACDxE,aADC,EAED4D,YAFC,EAGD1B,UAHC,EAIDiC,iBAJC,EAKDN,gBALC,EAMD/D,UANC,CA9CH;EAuDA,IAAMwF,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAA,EAAS;IAChC,OACEzH,KAAA,CAAAuC,aAAA,CAAC/B,qBAAD,CAAuBkH,QAAvB;MAAgCC,KAAK,EAAE7D;IAAvC,GACGzB,aAAa,CAAC;MACbL,KAAK,EAAEA,KADM;MAEbC,UAAU,EAAEA,UAFC;MAGbC,WAAW,EAAEA;IAHA,CAAD,CADhB,CADF;EASD,CAVD;EAYA,IAAM0F,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;IAC/B,OACE5H,KAAA,CAAAuC,aAAA,CAACxB,oBAAD;MACE8G,OAAO,EAAEpF,qBADX;MAEEqF,YAAY,MAFd;MAGEC,KAAK,EAAEC,MAAM,CAACC;IAHhB,GAKGjG,KAAK,CAACsB,MAAN,CAAa4E,GAAb,CAAiB,UAACC,KAAD,EAAQ5E,KAAR,EAAkB;MAClC,IAAM6E,UAAU,GAAGlG,WAAW,CAACiG,KAAK,CAAC3E,GAAP,CAA9B;MACA,IAAA6E,mBAAA,GAAuCD,UAAU,CAAC1E,OAAlD;QAAA4E,qBAAA,GAAAD,mBAAA,CAAQE,IAAI;QAAJA,IAAI,GAAAD,qBAAA,cAAG,IAAT,GAAAA,qBAAA;QAAeE,aAAA,GAAAH,mBAAA,CAAAG,aAAA;MACrB,IAAM9B,SAAS,GAAG1E,KAAK,CAACuB,KAAN,KAAgBA,KAAlC;MAEA,IAAIiF,aAAa,IAAI,CAAC9B,SAAtB,EAAiC;QAC/B,OAAO,IAAP;MACD;MAED,IAAI6B,IAAI,IAAI,CAAChD,MAAM,CAACE,QAAP,CAAgB0C,KAAK,CAAC3E,GAAtB,CAAT,IAAuC,CAACkD,SAA5C,EAAuD;QAErD,OAAO,IAAP;MACD;MAED,IAAA+B,oBAAA,GAaIL,UAAU,CAAC1E,OAbf;QAAAgF,qBAAA,GAAAD,oBAAA,CACEE,MAAM;QAANA,MAAM,GAAAD,qBAAA,cAAG,UAAAE,KAAA;UAAA,IAAAC,mBAAA;UAAA,IAAGC,MAAF,GAADF,KAAA,CAAGE,MAAF;YAAUpF,OAAA,GAAXkF,KAAA,CAAWlF,OAAA;UAAX,OACP1D,KAAA,CAAAuC,aAAA,CAAC5C,MAAD,EAAAoJ,QAAA,KACMrF,OADN;YAEEoF,MAAM,EAAEA,MAFV;YAGEE,KAAK,EAAEtJ,cAAc,CAACgE,OAAD,EAAUyE,KAAK,CAACc,IAAhB,CAHvB;YAIEC,UAAU,GAAAL,mBAAA,GACRnF,OAAO,CAACwF,UADA,cAAAL,mBAAA,cAAAA,mBAAA,GAEN,UAAAvG,KAAD;cAAA,OAAWtC,KAAA,CAAAuC,aAAA,CAAC3B,kBAAD,EAAwB0B,KAAxB;YAAA;UANhB,GADO;QAAA,CADL,GAAAoG,qBAAA;QAYJS,mBAAA,GAAAV,oBAAA,CAAAU,mBAAA;MAGF,OACEnJ,KAAA,CAAAuC,aAAA,CAACzB,WAAD;QACE0C,GAAG,EAAE2E,KAAK,CAAC3E,GADb;QAEEuE,KAAK,EAAE,CAAC3H,UAAU,CAACgJ,YAAZ,EAA0B;UAAEC,MAAM,EAAE3C,SAAS,GAAG,CAAH,GAAO,CAAC;QAA3B,CAA1B,CAFT;QAGE4C,OAAO,EAAE5C,SAHX;QAIEmB,OAAO,EAAEpF;MAJX,GAMEzC,KAAA,CAAAuC,aAAA,CAAC1C,MAAD;QACE0J,OAAO,EAAE7C,SADX;QAEEyB,KAAK,EAAEC,UAAU,CAACD,KAFpB;QAGElG,UAAU,EAAEmG,UAAU,CAACnG,UAHzB;QAIEuH,WAAW,EAAEpB,UAAU,CAAC1E,OAAX,CAAmB8F,WAJlC;QAKEC,iBAAiB,EAAErB,UAAU,CAAC1E,OAAX,CAAmB+F,iBALxC;QAMEC,qBAAqB,EAAEtB,UAAU,CAAC1E,OAAX,CAAmBgG,qBAN5C;QAOEf,MAAM,EAAEA,MAAM,CAAC;UACbG,MAAM,EAAElD,UADK;UAEbuC,KAAK,EAAEC,UAAU,CAACD,KAFL;UAGblG,UAAU,EACRmG,UAAU,CAACnG,UAJA;UAKbyB,OAAO,EAAE0E,UAAU,CAAC1E;QALP,CAAD,CAPhB;QAcEqE,KAAK,EAAEoB;MAdT,GAgBGf,UAAU,CAACuB,MAAX,EAhBH,CANF,CADF;IA2BD,CAxDA,CALH,CADF;EAiED,CAlED;EAoEA,OACE3J,KAAA,CAAAuC,aAAA,CAAC9B,mBAAD,CAAqBiH,QAArB;IAA8BC,KAAK,EAAE5B;EAArC,GACE/F,KAAA,CAAAuC,aAAA,CAACY,MAAD;IACEyG,IAAI,EAAE7D,YAAY,KAAK,QADzB;IAEE8D,MAAM,EAAE7D,gBAFV;IAGE8D,OAAO,EAAExD,iBAHX;IAIE9B,mBAAmB,EAAEA,mBAJvB;IAKEQ,YAAY,EAAEA,YALhB;IAMEF,cAAc,EAAEA,cANlB;IAOEiF,sBAAsB,EAAE,GAP1B;IAQEC,sBAAsB,EAAE9E,gBAR1B;IASE+E,mBAAmB,EAAErG,yBATvB;IAUEsG,kBAAkB,EAAEhG,wBAVtB;IAWEQ,mBAAmB,EAAEA,mBAXvB;IAYEL,UAAU,EAAEA,UAZd;IAaEP,cAAc,EAAEA,cAblB;IAcEK,WAAW,EAAE,CACX;MACEhD,KAAK,EAAEH,qBAAqB,CAAC4E,UAAD,CAD9B;MAEEuE,eAAe,EAAErE,MAAM,CAACsE;IAF1B,CADW,EAKX/F,UAAU,KAAK,WAAf,KACGP,cAAc,KAAK,MAAnB,GACG;MACEuG,gBAAgB,EAAEvE,MAAM,CAACwE,MAD3B;MAEEC,gBAAgB,EAAEnK,UAAU,CAACoK;IAF/B,CADH,GAKG;MACEC,eAAe,EAAE3E,MAAM,CAACwE,MAD1B;MAEEI,eAAe,EAAEtK,UAAU,CAACoK;IAF9B,CANN,CALW,EAeXrG,WAfW,CAdf;IA+BEwG,YAAY,EAAE;MAAER,eAAe,EAAEvF;IAAnB,CA/BhB;IAgCE6C,mBAAmB,EAAEA,mBAhCvB;IAiCEG,kBAAkB,EAAEA,kBAjCtB;IAkCEhC,UAAU,EAAEA;EAlCd,EADF,CADF;AAwCD;AAED,eAAe,SAASgF,UAATA,CAAAC,KAAA,EAAoD;EAAA,IAA9B5I,UAAF,GAAgC4I,KAAA,CAA9B5I,UAAF;IAAiB6I,IAAA,GAAAC,wBAAA,CAAeF,KAAA,EAAAG,SAAA;EACjE,OACEhL,KAAA,CAAAuC,aAAA,CAAC3C,sBAAD,QACEI,KAAA,CAAAuC,aAAA,CAACX,qBAAD;IAAuBmG,KAAK,EAAEC,MAAM,CAACC;EAArC,GACEjI,KAAA,CAAAuC,aAAA,CAACV,cAAD,EAAAkH,QAAA;IAAgB9G,UAAU,EAAEA;EAA5B,GAA4C6I,IAA5C,EADF,CADF,CADF;AAOD;AAED,IAAM9C,MAAM,GAAG5H,UAAU,CAAC6K,MAAX,CAAkB;EAC/BhD,OAAO,EAAE;IACPiD,IAAI,EAAE;EADC;AADsB,CAAlB,CAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}