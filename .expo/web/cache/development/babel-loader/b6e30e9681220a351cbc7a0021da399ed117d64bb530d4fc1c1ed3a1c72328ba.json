{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Animated, { interpolate, runOnJS, useAnimatedGestureHandler, useAnimatedStyle, useDerivedValue, useSharedValue, withSpring } from 'react-native-reanimated';\nimport DrawerProgressContext from \"../../utils/DrawerProgressContext\";\nimport Overlay from \"./Overlay\";\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar minmax = function minmax(value, start, end) {\n  'worklet';\n\n  return Math.min(Math.max(value, start), end);\n};\nexport default function Drawer(_ref) {\n  var dimensions = _ref.dimensions,\n    drawerPosition = _ref.drawerPosition,\n    drawerStyle = _ref.drawerStyle,\n    drawerType = _ref.drawerType,\n    gestureHandlerProps = _ref.gestureHandlerProps,\n    hideStatusBarOnOpen = _ref.hideStatusBarOnOpen,\n    keyboardDismissMode = _ref.keyboardDismissMode,\n    onClose = _ref.onClose,\n    onOpen = _ref.onOpen,\n    open = _ref.open,\n    overlayStyle = _ref.overlayStyle,\n    renderDrawerContent = _ref.renderDrawerContent,\n    renderSceneContent = _ref.renderSceneContent,\n    statusBarAnimation = _ref.statusBarAnimation,\n    swipeDistanceThreshold = _ref.swipeDistanceThreshold,\n    swipeEdgeWidth = _ref.swipeEdgeWidth,\n    swipeEnabled = _ref.swipeEnabled,\n    swipeVelocityThreshold = _ref.swipeVelocityThreshold;\n  var getDrawerWidth = function getDrawerWidth() {\n    var _ref2 = StyleSheet.flatten(drawerStyle) || {},\n      _ref2$width = _ref2.width,\n      width = _ref2$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref2$width;\n    if (typeof width === 'string' && width.endsWith('%')) {\n      var percentage = Number(width.replace(/%$/, ''));\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n    return typeof width === 'number' ? width : 0;\n  };\n  var drawerWidth = getDrawerWidth();\n  var isOpen = drawerType === 'permanent' ? true : open;\n  var isRight = drawerPosition === 'right';\n  var getDrawerTranslationX = React.useCallback(function (open) {\n    'worklet';\n\n    if (drawerPosition === 'left') {\n      return open ? 0 : -drawerWidth;\n    }\n    return open ? 0 : drawerWidth;\n  }, [drawerPosition, drawerWidth]);\n  var hideStatusBar = React.useCallback(function (hide) {\n    if (hideStatusBarOnOpen) {\n      StatusBar.setHidden(hide, statusBarAnimation);\n    }\n  }, [hideStatusBarOnOpen, statusBarAnimation]);\n  React.useEffect(function () {\n    hideStatusBar(isOpen);\n    return function () {\n      return hideStatusBar(false);\n    };\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n  var interactionHandleRef = React.useRef(null);\n  var startInteraction = function startInteraction() {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n  var endInteraction = function endInteraction() {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n  var hideKeyboard = function hideKeyboard() {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n  var onGestureStart = function onGestureStart() {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n  var onGestureFinish = function onGestureFinish() {\n    endInteraction();\n  };\n  var hitSlop = isRight ? {\n    right: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  } : {\n    left: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  };\n  var touchStartX = useSharedValue(0);\n  var touchX = useSharedValue(0);\n  var translationX = useSharedValue(getDrawerTranslationX(open));\n  var gestureState = useSharedValue(GestureState.UNDETERMINED);\n  var toggleDrawer = React.useCallback(function (open, velocity) {\n    'worklet';\n\n    var translateX = getDrawerTranslationX(open);\n    touchStartX.value = 0;\n    touchX.value = 0;\n    translationX.value = withSpring(translateX, {\n      velocity: velocity,\n      stiffness: 1000,\n      damping: 500,\n      mass: 3,\n      overshootClamping: true,\n      restDisplacementThreshold: 0.01,\n      restSpeedThreshold: 0.01\n    });\n    if (open) {\n      runOnJS(onOpen)();\n    } else {\n      runOnJS(onClose)();\n    }\n  }, [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]);\n  React.useEffect(function () {\n    return toggleDrawer(open);\n  }, [open, toggleDrawer]);\n  var onGestureEvent = useAnimatedGestureHandler({\n    onStart: function onStart(event, ctx) {\n      ctx.startX = translationX.value;\n      gestureState.value = event.state;\n      touchStartX.value = event.x;\n      runOnJS(onGestureStart)();\n    },\n    onActive: function onActive(event, ctx) {\n      touchX.value = event.x;\n      translationX.value = ctx.startX + event.translationX;\n      gestureState.value = event.state;\n    },\n    onEnd: function onEnd(event) {\n      gestureState.value = event.state;\n      var nextOpen = Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM && Math.abs(event.translationX) > swipeVelocityThreshold || Math.abs(event.translationX) > swipeDistanceThreshold ? drawerPosition === 'left' ? (event.velocityX === 0 ? event.translationX : event.velocityX) > 0 : (event.velocityX === 0 ? event.translationX : event.velocityX) < 0 : open;\n      toggleDrawer(nextOpen, event.velocityX);\n    },\n    onFinish: function onFinish() {\n      runOnJS(onGestureFinish)();\n    }\n  });\n  var translateX = useDerivedValue(function () {\n    var touchDistance = drawerType === 'front' && gestureState.value === GestureState.ACTIVE ? minmax(drawerPosition === 'left' ? touchStartX.value - drawerWidth : dimensions.width - drawerWidth - touchStartX.value, 0, dimensions.width) : 0;\n    var translateX = drawerPosition === 'left' ? minmax(translationX.value + touchDistance, -drawerWidth, 0) : minmax(translationX.value - touchDistance, 0, drawerWidth);\n    return translateX;\n  });\n  var isRTL = I18nManager.getConstants().isRTL;\n  var drawerAnimatedStyle = useAnimatedStyle(function () {\n    var distanceFromEdge = dimensions.width - drawerWidth;\n    return {\n      transform: drawerType === 'permanent' ? [] : [{\n        translateX: (drawerType === 'back' ? 0 : translateX.value) + (drawerPosition === 'left' ? isRTL ? -distanceFromEdge : 0 : isRTL ? 0 : distanceFromEdge)\n      }]\n    };\n  });\n  var contentAnimatedStyle = useAnimatedStyle(function () {\n    return {\n      transform: drawerType === 'permanent' ? [] : [{\n        translateX: drawerType === 'front' ? 0 : translateX.value + drawerWidth * (drawerPosition === 'left' ? 1 : -1)\n      }]\n    };\n  });\n  var progress = useDerivedValue(function () {\n    return drawerType === 'permanent' ? 1 : interpolate(translateX.value, [getDrawerTranslationX(false), getDrawerTranslationX(true)], [0, 1]);\n  });\n  return React.createElement(DrawerProgressContext.Provider, {\n    value: progress\n  }, React.createElement(PanGestureHandler, _extends({\n    activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    hitSlop: hitSlop,\n    enabled: drawerType !== 'permanent' && swipeEnabled,\n    onGestureEvent: onGestureEvent\n  }, gestureHandlerProps), React.createElement(Animated.View, {\n    style: [styles.main, {\n      flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n    }]\n  }, React.createElement(Animated.View, {\n    style: [styles.content, contentAnimatedStyle]\n  }, React.createElement(View, {\n    accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n    importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n    style: styles.content\n  }, renderSceneContent()), drawerType !== 'permanent' ? React.createElement(Overlay, {\n    progress: progress,\n    onPress: function onPress() {\n      return toggleDrawer(false);\n    },\n    style: overlayStyle\n  }) : null), React.createElement(Animated.View, {\n    accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n    removeClippedSubviews: Platform.OS !== 'ios',\n    style: [styles.container, {\n      position: drawerType === 'permanent' ? 'relative' : 'absolute',\n      zIndex: drawerType === 'back' ? -1 : 0\n    }, drawerAnimatedStyle, drawerStyle]\n  }, renderDrawerContent()))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"names":["React","I18nManager","InteractionManager","Keyboard","Platform","StatusBar","StyleSheet","View","PanGestureHandler","State","GestureState","Animated","interpolate","runOnJS","useAnimatedGestureHandler","useAnimatedStyle","useDerivedValue","useSharedValue","withSpring","DrawerProgressContext","Overlay","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","minmax","value","start","end","Math","min","max","Drawer","_ref","dimensions","drawerPosition","drawerStyle","drawerType","gestureHandlerProps","hideStatusBarOnOpen","keyboardDismissMode","onClose","onOpen","open","overlayStyle","renderDrawerContent","renderSceneContent","statusBarAnimation","swipeDistanceThreshold","swipeEdgeWidth","swipeEnabled","swipeVelocityThreshold","getDrawerWidth","_ref2","flatten","_ref2$width","width","endsWith","percentage","Number","replace","isFinite","drawerWidth","isOpen","isRight","getDrawerTranslationX","useCallback","hideStatusBar","hide","setHidden","useEffect","interactionHandleRef","useRef","startInteraction","current","createInteractionHandle","endInteraction","clearInteractionHandle","hideKeyboard","dismiss","onGestureStart","onGestureFinish","hitSlop","right","undefined","left","touchStartX","touchX","translationX","gestureState","UNDETERMINED","toggleDrawer","velocity","translateX","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","onGestureEvent","onStart","event","ctx","startX","state","x","onActive","onEnd","nextOpen","abs","velocityX","onFinish","touchDistance","ACTIVE","isRTL","getConstants","drawerAnimatedStyle","distanceFromEdge","transform","contentAnimatedStyle","progress","createElement","Provider","_extends","activeOffsetX","failOffsetY","enabled","style","styles","main","flexDirection","content","accessibilityElementsHidden","importantForAccessibility","onPress","accessibilityViewIsModal","removeClippedSubviews","OS","container","position","zIndex","create","top","bottom","maxWidth","flex","_objectSpread","select","web","default","overflow"],"sources":["G:\\DOWNLOADS\\meal-app-main\\node_modules\\@react-navigation\\drawer\\lib\\module\\views\\modern\\Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n  State as GestureState,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  interpolate,\n  runOnJS,\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  useDerivedValue,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport Overlay from './Overlay';\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst minmax = (value: number, start: number, end: number) => {\n  'worklet';\n\n  return Math.min(Math.max(value, start), end);\n};\n\nexport default function Drawer({\n  dimensions,\n  drawerPosition,\n  drawerStyle,\n  drawerType,\n  gestureHandlerProps,\n  hideStatusBarOnOpen,\n  keyboardDismissMode,\n  onClose,\n  onOpen,\n  open,\n  overlayStyle,\n  renderDrawerContent,\n  renderSceneContent,\n  statusBarAnimation,\n  swipeDistanceThreshold,\n  swipeEdgeWidth,\n  swipeEnabled,\n  swipeVelocityThreshold,\n}: DrawerProps) {\n  const getDrawerWidth = (): number => {\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  const drawerWidth = getDrawerWidth();\n\n  const isOpen = drawerType === 'permanent' ? true : open;\n  const isRight = drawerPosition === 'right';\n\n  const getDrawerTranslationX = React.useCallback(\n    (open: boolean) => {\n      'worklet';\n\n      if (drawerPosition === 'left') {\n        return open ? 0 : -drawerWidth;\n      }\n\n      return open ? 0 : drawerWidth;\n    },\n    [drawerPosition, drawerWidth]\n  );\n\n  const hideStatusBar = React.useCallback(\n    (hide: boolean) => {\n      if (hideStatusBarOnOpen) {\n        StatusBar.setHidden(hide, statusBarAnimation);\n      }\n    },\n    [hideStatusBarOnOpen, statusBarAnimation]\n  );\n\n  React.useEffect(() => {\n    hideStatusBar(isOpen);\n\n    return () => hideStatusBar(false);\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n\n  const interactionHandleRef = React.useRef<number | null>(null);\n\n  const startInteraction = () => {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n\n  const endInteraction = () => {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n\n  const hideKeyboard = () => {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  const onGestureStart = () => {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  const onGestureFinish = () => {\n    endInteraction();\n  };\n\n  // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n  // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n  const hitSlop = isRight\n    ? // Extend hitSlop to the side of the screen when drawer is closed\n      // This lets the user drag the drawer from the side of the screen\n      { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n    : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n  const touchStartX = useSharedValue(0);\n  const touchX = useSharedValue(0);\n  const translationX = useSharedValue(getDrawerTranslationX(open));\n  const gestureState = useSharedValue<GestureState>(GestureState.UNDETERMINED);\n\n  const toggleDrawer = React.useCallback(\n    (open: boolean, velocity?: number) => {\n      'worklet';\n\n      const translateX = getDrawerTranslationX(open);\n\n      touchStartX.value = 0;\n      touchX.value = 0;\n      translationX.value = withSpring(translateX, {\n        velocity,\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n      });\n\n      if (open) {\n        runOnJS(onOpen)();\n      } else {\n        runOnJS(onClose)();\n      }\n    },\n    [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]\n  );\n\n  React.useEffect(() => toggleDrawer(open), [open, toggleDrawer]);\n\n  const onGestureEvent = useAnimatedGestureHandler<\n    PanGestureHandlerGestureEvent,\n    { startX: number }\n  >({\n    onStart: (event, ctx) => {\n      ctx.startX = translationX.value;\n      gestureState.value = event.state;\n      touchStartX.value = event.x;\n\n      runOnJS(onGestureStart)();\n    },\n    onActive: (event, ctx) => {\n      touchX.value = event.x;\n      translationX.value = ctx.startX + event.translationX;\n      gestureState.value = event.state;\n    },\n    onEnd: (event) => {\n      gestureState.value = event.state;\n\n      const nextOpen =\n        (Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM &&\n          Math.abs(event.translationX) > swipeVelocityThreshold) ||\n        Math.abs(event.translationX) > swipeDistanceThreshold\n          ? drawerPosition === 'left'\n            ? // If swiped to right, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) > 0\n            : // If swiped to left, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) < 0\n          : open;\n\n      toggleDrawer(nextOpen, event.velocityX);\n    },\n    onFinish: () => {\n      runOnJS(onGestureFinish)();\n    },\n  });\n\n  const translateX = useDerivedValue(() => {\n    // Comment stolen from react-native-gesture-handler/DrawerLayout\n    //\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the translationX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    const touchDistance =\n      drawerType === 'front' && gestureState.value === GestureState.ACTIVE\n        ? minmax(\n            drawerPosition === 'left'\n              ? touchStartX.value - drawerWidth\n              : dimensions.width - drawerWidth - touchStartX.value,\n            0,\n            dimensions.width\n          )\n        : 0;\n\n    const translateX =\n      drawerPosition === 'left'\n        ? minmax(translationX.value + touchDistance, -drawerWidth, 0)\n        : minmax(translationX.value - touchDistance, 0, drawerWidth);\n\n    return translateX;\n  });\n\n  const isRTL = I18nManager.getConstants().isRTL;\n  const drawerAnimatedStyle = useAnimatedStyle(() => {\n    const distanceFromEdge = dimensions.width - drawerWidth;\n\n    return {\n      transform:\n        drawerType === 'permanent'\n          ? // Reanimated needs the property to be present, but it results in Browser bug\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n            []\n          : [\n              {\n                translateX:\n                  // The drawer stays in place when `drawerType` is `back`\n                  (drawerType === 'back' ? 0 : translateX.value) +\n                  (drawerPosition === 'left'\n                    ? isRTL\n                      ? -distanceFromEdge\n                      : 0\n                    : isRTL\n                    ? 0\n                    : distanceFromEdge),\n              },\n            ],\n    };\n  });\n\n  const contentAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      transform:\n        drawerType === 'permanent'\n          ? // Reanimated needs the property to be present, but it results in Browser bug\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n            []\n          : [\n              {\n                translateX:\n                  // The screen content stays in place when `drawerType` is `front`\n                  drawerType === 'front'\n                    ? 0\n                    : translateX.value +\n                      drawerWidth * (drawerPosition === 'left' ? 1 : -1),\n              },\n            ],\n    };\n  });\n\n  const progress = useDerivedValue(() => {\n    return drawerType === 'permanent'\n      ? 1\n      : interpolate(\n          translateX.value,\n          [getDrawerTranslationX(false), getDrawerTranslationX(true)],\n          [0, 1]\n        );\n  });\n\n  return (\n    <DrawerProgressContext.Provider value={progress}>\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && swipeEnabled}\n        onGestureEvent={onGestureEvent}\n        {...gestureHandlerProps}\n      >\n        {/* Immediate child of gesture handler needs to be an Animated.View */}\n        <Animated.View\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View style={[styles.content, contentAnimatedStyle]}>\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent()}\n            </View>\n            {drawerType !== 'permanent' ? (\n              <Overlay\n                progress={progress}\n                onPress={() => toggleDrawer(false)}\n                style={overlayStyle}\n              />\n            ) : null}\n          </Animated.View>\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            style={[\n              styles.container,\n              {\n                position: drawerType === 'permanent' ? 'relative' : 'absolute',\n                zIndex: drawerType === 'back' ? -1 : 0,\n              },\n              drawerAnimatedStyle,\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent()}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    </DrawerProgressContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}